import sys
from typing import List, Tuple
import random

def find_factors(n: int) -> Tuple[int, int]:
    """Finds two factors of a composite number n using the Pollard-Rho algorithm."""
    def gcd(a: int, b: int) -> int:
        """Computes the greatest common divisor of a and b."""
        while b != 0:
            a, b = b, a % b
        return a

    def pollard_rho(n: int) -> Tuple[int, int]:
        """Finds a non-trivial factor of n using the Pollard-Rho algorithm."""
        # Choose a random value for x and compute y = x^2 + c mod n
        x = random.randrange(n)
        y = x * x + 1
        c = random.randrange(n)
        y = (y * y + c) % n

        # Set up the variables for the loop
        p = 1
        g = 1
        while g == 1:
            # Compute the next value of x and y using the recurrence relation
            x = (x * x + c) % n
            y = (y * y + c) % n
            y = (y * y + c) % n
            # Compute the greatest common divisor of the current difference and n
            g = gcd(abs(x - y), n)
            # Increment p
            p += 1
            if p == 32:
                # If p reaches 32, return a non-trivial factor of n
                return g, n // g

        # If g is not 1, return g as a non-trivial factor of n
        return g, n // g

    # If n is even, return 2 and n//2 as the two factors
    if n % 2 == 0:
        return 2, n // 2

    # Find a non-trivial factor of n using Pollard-Rho
    factor, remaining = pollard_rho(n)
    # Return the two factors
    return factor, remaining

def main():
    # Read the composite number from the input file
    with open(sys.argv[1], 'r') as f:
        n = int(f.readline().strip())

    # Find the two factors of the composite number
    p, q = find_factors(n)

    # Print the factorization in the required format
    print(f'{n}={p}*{q}')

if __name__ == '__main__':
    main()
