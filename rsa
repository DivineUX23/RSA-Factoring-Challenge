from typing import List, Tuple
import random

def find_prime_factors(n: int) -> List[int]:
    """Finds the prime factors of a composite number n using the Pollard-Rho algorithm."""
    def gcd(a: int, b: int) -> int:
        """Computes the greatest common divisor of a and b."""
        while b != 0:
            a, b = b, a % b
        return a

    def pollard_rho(n: int) -> Tuple[int, int]:
        """Finds a non-trivial factor of n using the Pollard-Rho algorithm."""
        # Choose a random value for x and compute y = x^2 + c mod n
        x = random.randrange(n)
        y = x * x + 1
        c = random.randrange(n)
        y = (y * y + c) % n

        # Set up the variables for the loop
        p = 1
        g = 1
        while g == 1:
            # Compute the next value of x and y using the recurrence relation
            x = (x * x + c) % n
            y = (y * y + c) % n
            y = (y * y + c) % n
            # Compute the greatest common divisor of the current difference and n
            g = gcd(abs(x - y), n)
            # Increment p
            p += 1
            if p == 32:
                # If p reaches 32, return a non-trivial factor of n
                return g, n // g

        # If g is not 1, return g as a non-trivial factor of n
        return g, n // g

    # If n is even, return 2 as a prime factor
    if n % 2 == 0:
        return [2]

    # Initialize the list of prime factors and the remaining value of n
    prime_factors = []
    remaining = n
    # Keep finding non-trivial factors until n is 1
    while remaining > 1:
        # Find a non-trivial factor of n using Pollard-Rho
        factor, remaining = pollard_rho(remaining)
        # If the factor is prime, add it to the list of prime factors
        if factor not in prime_factors:
            prime_factors.append(factor)
        # If the remaining value is prime, add it to the list of prime factors
        if remaining not in prime_factors:
            prime_factors.append(remaining)
    return prime_factors
